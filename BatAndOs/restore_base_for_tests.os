#use cpdb
#use v8runner
#use logos
#use messenger

Перем ПутьКаталогаЛог; //Путь к каталогу файлом лога
Перем ПараметрыРаботы; //Структура параметров

Процедура ЗаполнитьЗначенияПеременных()
	
	ПутьКаталогаЛог = "E:\Update1cUT\Vanessa\script\log\";
	
	ПараметрыРаботы = Новый Структура();
	ПараметрыРаботы.Вставить("ДнейХраненияКопий", 2);
	ПараметрыРаботы.Вставить("КаталогКопий", "e:\Backup\Trade11\");
	ПараметрыРаботы.Вставить("КаталогКопийНаРабочейСервере", "z:\trade11\");
	ПараметрыРаботы.Вставить("АдресСУБД", "SRV-1C-DEV");
	ПараметрыРаботы.Вставить("АдресСервера1с", "srv-1c-dev");
	ПараметрыРаботы.Вставить("ИмяПользователяСУБД", "sa");
	ПараметрыРаботы.Вставить("ПарольСУБД", "xAA4B27K");
	ПараметрыРаботы.Вставить("ИмяПользователя1с", "eremin");
	ПараметрыРаботы.Вставить("ПарольПользователя1с", "Tb4m8443df");
	ПараметрыРаботы.Вставить("ПользовательХранилище", "Autotest");
	ПараметрыРаботы.Вставить("ПарольХранилище", "cicd");
	ПараметрыРаботы.Вставить("ПутьКФайлуДанныхБазы",
		"C:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER_DEV\MSSQL\DATA\"); // слэш в конце обязателен
	ПараметрыРаботы.Вставить("ПутьКФайлуЖурнала",
		"c:\Program Files\Microsoft SQL Server\MSSQL15.MSSQLSERVER_DEV\MSSQL\DATA\");
	ПараметрыРаботы.Вставить("ИмяБазы", "trade11_test");
	ПараметрыРаботы.Вставить("МаскаПоискаБэкапа", "trade11_backup*.bak");
	ПараметрыРаботы.Вставить("ПутьКЗапускуДымовыхТестов", "E:\Update1cUT\Vanessa\ShedulledSmokeTests.bat");
	ПараметрыРаботы.Вставить("ПутьКРезультатуДымовыхтестов",
		"E:\Update1cUT\Vanessa\vanessa-automation\SmokeTests\BuildStatus.log");
	ПараметрыРаботы.Вставить("ПутьКФайлуБлокуОбновления",
		"E:\Update1cUT\Vanessa\vanessa-automation\SmokeTests\no_update.txt");
	ПараметрыРаботы.Вставить("ПутьКФайлуФормированияОтчетаАлюр", "E:\Update1cUT\Vanessa\Allure_start.bat");
	ПараметрыРаботы.Вставить("ПутьКОтчетуАлюр", "http://192.168.46.253:52888/index.html");
	
КонецПроцедуры

Процедура ЗаписатьЛог(Сообщение) Экспорт
	
	ТекущаяДата = Формат(ТекущаяДата(), "ДФ=yyyyMMdd");
	
	ИмяФайла = СтрШаблон("%1%2%3%4", ПутьКаталогаЛог, "LogFile", ТекущаяДата, ".log");
	
	СообщениеВЛог = СтрШаблон("%1 %2", ТекущаяДата(), Сообщение);
	
	ЛогФайл = Новый ЗаписьТекста(ИмяФайла, КодировкаТекста.ANSI, , Истина);
	ЛогФайл.Записать(СообщениеВЛог + Символы.ПС);
	ЛогФайл.Закрыть();
	
КонецПроцедуры


Процедура ОтправитьСообщение(Знач ТекстСообщения)
	
	//Получатель = "549115727";
	Получатель = "-1002109672681"; //Фитатлон автотесты
	BotID = "7030915619:AAHsRW8jdAwi0OATJhxYSExEqH-TJIn8pvI";
	
	Мессенджер = Новый Мессенджер();
	Мессенджер.ИнициализироватьТранспорт("telegram", Новый Структура("Логин", BotID));
	Мессенджер.ОтправитьСообщение("telegram", Получатель, ТекстСообщения);
	
КонецПроцедуры

Функция НайтиПоследнийФайлОбновлений(Знач Каталог, МаскаПоиска)
	
	Файлы = НайтиФайлы(Каталог, МаскаПоиска, Ложь);
	ДатаСамогоСтаршего = Неопределено;
	НайденныйФайл = Неопределено;
	Для Каждого мФайл Из Файлы Цикл
		
		ДатаФайла = мФайл.ПолучитьВремяСоздания();
		Если (ДатаСамогоСтаршего = Неопределено) ИЛИ (ДатаФайла > ДатаСамогоСтаршего) Тогда
			НайденныйФайл = мФайл;
			ДатаСамогоСтаршего = ДатаФайла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НайденныйФайл = Неопределено Тогда
		Возврат НайденныйФайл;
	Иначе
		Возврат НайденныйФайл.ПолноеИмя;
	КонецЕсли;
	
КонецФункции

Процедура ВосстановитьБазуЗапускаТестов(Отказ)
	
	//Копирование файла по сети
	ФайлКопии = НайтиПоследнийФайлОбновлений(
			ПараметрыРаботы.КаталогКопийНаРабочейСервере,
			ПараметрыРаботы.МаскаПоискаБэкапа);
	Файл = Новый Файл(ФайлКопии);
	ИмяФайлаКопии = Файл.Имя;
	ФайлПриемник = ПараметрыРаботы.КаталогКопий + ИмяФайлаКопии;
	
	Попытка
		ОтправитьСообщение(СтрШаблон("Начало копирования бэкапа с рабочего сервера %1", ФайлКопии));
		КопироватьФайл(ФайлКопии, ФайлПриемник);
	Исключение
		Отказ = Истина;
		ТекстСообщения = СтрШаблон("Не удалось скопировать файл архива с рабочего сервера. Причина %1", ОписаниеОшибки());
		ОтправитьСообщение(ТекстСообщения);
	КонецПопытки;
	
	ТекстСообщения = СтрШаблон("Начало восстанавления базы %1 из бэкапа из %2", ПараметрыРаботы.ИмяБазы, ФайлПриемник);
	ОтправитьСообщение(ТекстСообщения);
	
	ФайлКопии = НайтиПоследнийФайлОбновлений(ПараметрыРаботы.КаталогКопий, ПараметрыРаботы.МаскаПоискаБэкапа);
	
	Если ФайлКопии = Неопределено Тогда
		ТекстСообщения = "Не нашли файл с бэкапом";
		ОтправитьСообщение(ТекстСообщения);
		ЗаписатьЛог(ТекстСообщения);
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон("Восстановление базы %1 из %2", ПараметрыРаботы.ИмяБазы, ФайлКопии);
	
	ЗаписатьЛог(ТекстСообщения);
	ОтправитьСообщение(ТекстСообщения);
	
	Подключение = Новый ПодключениеMSSQL(ПараметрыРаботы.АдресСУБД,
			ПараметрыРаботы.ИмяПользователяСУБД,
			ПараметрыРаботы.ПарольСУБД);
	Попытка
		РаботаССУБД = Новый РаботаССУБД(Подключение);
		
		РаботаССУБД.ВыполнитьВосстановление(ПараметрыРаботы.ИмяБазы,
			ФайлКопии,
			ПараметрыРаботы.ПутьКФайлуДанныхБазы,
			ПараметрыРаботы.ПутьКФайлуЖурнала,
			Ложь);
		
		СообщениеОВосстановленииБазы = СтрШаблон("База %1 успешно восстановлена", ПараметрыРаботы.ИмяБазы);
		
	Исключение
		ОшибкаВосстановления = ОписаниеОшибки();
		ЗаписатьЛог(ОшибкаВосстановления);
		
		СообщениеОВосстановленииБазы = СтрШаблон("Базу %1 восстановить не удалось: %2",
				ПараметрыРаботы.ИмяБазы,
				ОшибкаВосстановления);
		
		Отказ = Истина;
	КонецПопытки;
	
	ЗаписатьЛог(СообщениеОВосстановленииБазы);
	ОтправитьСообщение(СообщениеОВосстановленииБазы);
	
КонецПроцедуры


Функция ОтключитьБазуОтХранилища(ИмяРасширения = "")
	
	Структура = Новый Структура;
	Структура.Вставить("Результат", Истина);
	Структура.Вставить("Ошибка", "");
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	ПараметрыСтрокиСоединения = Конфигуратор.ПараметрыСтрокиСоединения();
	ПараметрыСтрокиСоединения.Порт = "1541";
	ПараметрыСтрокиСоединения.Сервер = ПараметрыРаботы.АдресСервера1с;
	ПараметрыСтрокиСоединения.ИмяБазы = ПараметрыРаботы.ИмяБазы;
	
	Конфигуратор.УстановитьКонтекст(ПараметрыСтрокиСоединения,
		ПараметрыРаботы.ИмяПользователя1с,
		ПараметрыРаботы.ПарольПользователя1с);
	
	КоличествоПопыток = 3; //Почему с первого иногда не проходит, не знаю
	
	Для Счетчик = 1 По КоличествоПопыток Цикл
		Попытка
			Конфигуратор.ОтключитьсяОтХранилища(ИмяРасширения);
			Прервать;
		Исключение
			Ошибка = ОписаниеОшибки();
			
			Структура.Результат = Ложь;
			Структура.Ошибка = Ошибка;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

Функция КонфигурацииДляОбновленияИзХранилища()
	
	ПользовательХранилище = ПараметрыРаботы.ПользовательХранилище;
	ПарольХранилище = ПараметрыРаботы.ПарольХранилище;
	
	Массив = Новый Массив;
	
	Структура = Новый Структура;
	Структура.Вставить("ИмяКонфигурации", "Основная конфигурация");
	Структура.Вставить("СтрокаСоединения", "tcp://srv-1c-dev/trade11");
	Структура.Вставить("ПользовательХранилища", ПользовательХранилище);
	Структура.Вставить("ПарольПользователяХранилища", ПарольХранилище);
	Структура.Вставить("ИмяРасширения", "");
	
	Массив.Добавить(Структура);
	
	Структура = Новый Структура;
	Структура.Вставить("ИмяКонфигурации", "Локальные обработки");
	Структура.Вставить("СтрокаСоединения", "tcp://srv-1c-dev/extension_local_dev");
	Структура.Вставить("ПользовательХранилища", ПользовательХранилище);
	Структура.Вставить("ПарольПользователяХранилища", ПарольХранилище);
	Структура.Вставить("ИмяРасширения", "ЛокальныеДоработки");
	
	Массив.Добавить(Структура);
	
	Структура = Новый Структура;
	Структура.Вставить("ИмяКонфигурации", "MARKETPLACE_MODUL");
	Структура.Вставить("СтрокаСоединения", "tcp://srv-1c-dev/yamarket");
	Структура.Вставить("ПользовательХранилища", ПользовательХранилище);
	Структура.Вставить("ПарольПользователяХранилища", ПарольХранилище);
	Структура.Вставить("ИмяРасширения", "MARKETPLACE_MODUL");
	
	Массив.Добавить(Структура);
	
	Структура = Новый Структура;
	Структура.Вставить("ИмяКонфигурации", "Управление Онлайн Торговлей");
	Структура.Вставить("СтрокаСоединения", "tcp://srv-1c-dev/cgot");
	Структура.Вставить("ПользовательХранилища", ПользовательХранилище);
	Структура.Вставить("ПарольПользователяХранилища", ПарольХранилище);
	Структура.Вставить("ИмяРасширения", "УправлениеОнлайнТорговлей");
	
	Массив.Добавить(Структура);
	
	Структура = Новый Структура;
	Структура.Вставить("ИмяКонфигурации", "Апишип");
	Структура.Вставить("СтрокаСоединения", "tcp://srv-1c-dev/apiship");
	Структура.Вставить("ПользовательХранилища", ПользовательХранилище);
	Структура.Вставить("ПарольПользователяХранилища", ПарольХранилище);
	Структура.Вставить("ИмяРасширения", "Апишип");
	
	Массив.Добавить(Структура);
	
	Возврат Массив;
	
КонецФункции
Процедура ОбновитьБазуИзХранилища(Отказ)
	
	Сообщение = СтрШаблон("Начинаем %1", ТекущаяДата());
	
	Сообщить(Сообщение);
	
	Конфигуратор = Новый УправлениеКонфигуратором();
	ПараметрыСтрокиСоединения = Конфигуратор.ПараметрыСтрокиСоединения();
	ПараметрыСтрокиСоединения.Порт = "1541";
	ПараметрыСтрокиСоединения.Сервер = ПараметрыРаботы.АдресСервера1с;
	ПараметрыСтрокиСоединения.ИмяБазы = ПараметрыРаботы.ИмяБазы;
	
	Конфигуратор.УстановитьКонтекст(ПараметрыСтрокиСоединения,
		ПараметрыРаботы.ИмяПользователя1с,
		ПараметрыРаботы.ПарольПользователя1с);
	
	МассивОтключенияОтХранилища = Новый Массив;
	МассивОтключенияОтХранилища.Добавить(""); //Основная база
	МассивОтключенияОтХранилища.Добавить("ЛокальныеДоработки");
	МассивОтключенияОтХранилища.Добавить("MARKETPLACE_MODUL");
	МассивОтключенияОтХранилища.Добавить("УправлениеОнлайнТорговлей");
	МассивОтключенияОтХранилища.Добавить("АпиШип");
	
	флагОтключенияКонфигурацийОтХранилища = Истина;
	
	Для Каждого ЭлементМассива Из МассивОтключенияОтХранилища Цикл
		ОтправитьСообщение(СтрШаблон("Отключаем от  хранилища: :%1", ЭлементМассива));
		СтруктураРезультат = ОтключитьБазуОтХранилища(ЭлементМассива);
		Если НЕ СтруктураРезультат.Результат Тогда
			ОтправитьСообщение(СтруктураРезультат.Ошибка);
			флагОтключенияКонфигурацийОтХранилища = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ флагОтключенияКонфигурацийОтХранилища Тогда
		Отказ = Истина;
		ОтправитьСообщение(СтрШаблон("Ошибка на этапе %1", "Отключение конфигурации от хранилища"));
		Возврат;
		
	КонецЕсли;
	
	флагЗагрузкаКонфигурацииИзХранилища = Истина;
	
	МассивКонфигурацииДляОбновленияИзХранилища = КонфигурацииДляОбновленияИзХранилища();
	Для Каждого СтруктураМассива Из МассивКонфигурацииДляОбновленияИзХранилища Цикл
		
		Попытка
			
			ТекстСообщения = СтрШаблон("Начало обновления из хранилища для: %1", СтруктураМассива.ИмяКонфигурации);
			ОтправитьСообщение(ТекстСообщения);
			
			Конфигуратор.ЗагрузитьКонфигурациюИзХранилища(СтруктураМассива.СтрокаСоединения,
				СтруктураМассива.ПользовательХранилища,
				СтруктураМассива.ПарольПользователяХранилища,
				,
				СтруктураМассива.ИмяРасширения);
			
		Исключение
			флагЗагрузкаКонфигурацииИзХранилища = Ложь;
			ОтправитьСообщение(ОписаниеОшибки());
			
		КонецПопытки;
	КонецЦикла;
	
	Если НЕ флагЗагрузкаКонфигурацииИзХранилища Тогда
		Отказ = Истина;
		ОтправитьСообщение(СтрШаблон("Ошибка на этапе %1", "Загрузка конфигурации из хранилища"));
		Возврат;
		
	КонецЕсли;
	
	ТекстСообщения = "Обновление конфигурации из хранилища выполнено";
	ОтправитьСообщение(ТекстСообщения);
	Сообщить(ТекстСообщения);
	
	Для Каждого СтруктураМассива Из МассивКонфигурацииДляОбновленияИзХранилища Цикл
		
		Попытка
			
			ТекстСообщения = СтрШаблон("Начало принятия изменений для: %1", СтруктураМассива.ИмяКонфигурации);
			ЗаписатьЛог(ТекстСообщения);
			ОтправитьСообщение(ТекстСообщения);
			
			Конфигуратор.ОбновитьКонфигурациюБазыДанных( , , , СтруктураМассива.ИмяРасширения);
			
			ТекстСообщения = СтрШаблон("Окончание принятия изменений для: %1", СтруктураМассива.ИмяКонфигурации);
			
			ЗаписатьЛог(ТекстСообщения);
			ОтправитьСообщение(ТекстСообщения);
			
		Исключение
			Отказ = Истина;
			ЗаписатьЛог(ТекстСообщения);
			ОтправитьСообщение(ОписаниеОшибки());
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗапускДымовыхТестов()
	
	//Удалим файл статуса запуска дымовых тестов
	ФайлСтатусаДымовыхТестов = ПараметрыРаботы.ПутьКРезультатуДымовыхтестов;
	ФайлСтатуса = Новый Файл(ФайлСтатусаДымовыхТестов);
	Если ФайлСтатуса.Существует() Тогда
		УдалитьФайлы(ФайлСтатусаДымовыхТестов);
	КонецЕсли;
	
	
	ТекстСообщения = "Начало дымовых тестов";
	ЗаписатьЛог(ТекстСообщения);
	ОтправитьСообщение(ТекстСообщения);
	
	ПутьКЗапускуДымовыхТестов = ПараметрыРаботы.ПутьКЗапускуДымовыхТестов;
	КодВозврата = 0;
	ЗапуститьПриложение(ПутьКЗапускуДымовыхТестов, , Истина, КодВозврата);
	
	ТекстСообщения = "Окончание дымовых тестов";
	
	ЗаписатьЛог(ТекстСообщения);
	ОтправитьСообщение(ТекстСообщения);
	
	ЗначениеСтатусаСборки = 1;
	
	Если ФайлСтатуса.Существует() Тогда
		Файл = Новый ЧтениеТекста(ФайлСтатусаДымовыхТестов);
		ЗначениеСтатусаСборки = Файл.Прочитать();
		Файл.Закрыть();
		
		Если ЗначениеСтатусаСборки = "0" Тогда
			ТекстСообщения = "Дымовое тестирование успешно завершено";
		Иначе
			ТекстСообщения = "Дымовое тестирование завершено с ошибками";
		КонецЕсли;
		ЗаписатьЛог(ТекстСообщения);
		ОтправитьСообщение(ТекстСообщения);
		
		ЗапуститьПриложение(ПараметрыРаботы.ПутьКФайлуФормированияОтчетаАлюр, , Ложь);
		
		ТекстСообщения = СтрШаблон("Отчет Allure можно посмотреть по пути: %1", ПараметрыРаботы.ПутьКОтчетуАлюр);
		
		ЗаписатьЛог(ТекстСообщения);
		ОтправитьСообщение(ТекстСообщения);
		
	Иначе
		ТекстСообщения = СтрШаблон("Отсутствует файл результата дымовых тестов: %1",
				ПараметрыРаботы.ПутьКРезультатуДымовыхтестов);
		
		ЗаписатьЛог(ТекстСообщения);
		ОтправитьСообщение(ТекстСообщения);
	КонецЕсли;
	
	Если ЗначениеСтатусаСборки <> "0" Тогда
		
		ФайлБлокировки = Новый ЗаписьТекста(ПараметрыРаботы.ПутьКФайлуБлокуОбновления, КодировкаТекста.ANSI, , Истина);
		ФайлБлокировки.Записать("Блокировка обновления trade11");
		ФайлБлокировки.Закрыть();
		
		ТекстСообщения = "Создан файл блокировки. Обновление базы запущено не будет";
		
		ЗаписатьЛог(ТекстСообщения);
		ОтправитьСообщение(ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчисткаСтарыхБэкапов()
	
	ОтправитьСообщение("Начало очистки старых бэкапов");
	
	МассивФайловДляУдаления = Новый Массив;
	
	ДнейХраненияКопий = ПараметрыРаботы.ДнейХраненияКопий;
	ФайлыКопий = НайтиФайлы(ПараметрыРаботы.КаталогКопий, ПараметрыРаботы.МаскаПоискаБэкапа);
	Для Каждого ТекущийФайл Из ФайлыКопий Цикл
		
		ДатаФайла = НачалоДня(ТекущийФайл.ПолучитьВремяСоздания());
		ТекущийДень = НачалоДня(ТекущаяДата());
		
		КоличествоСекунд = 24 * 60 * 60;
		ВозрастФайлаДней = (ТекущийДень - ДатаФайла) / КоличествоСекунд;
		Если ВозрастФайлаДней > ДнейХраненияКопий Тогда
			МассивФайловДляУдаления.Добавить(ТекущийФайл);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ФайлМассива Из МассивФайловДляУдаления Цикл
		Попытка
			УдаляемыйФайл = СокрЛП(ФайлМассива.ПолноеИмя);
			УдалитьФайлы(УдаляемыйФайл);
			ОтправитьСообщение(СтрШаблон("Удален файл %1", УдаляемыйФайл));
		Исключение
			ОтправитьСообщение(СтрШаблон("Ошибка удаления файла: %1", ФайлМассива));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура Регламент()
	Попытка
		ТекстСообщения = ("Тестирование автотестов на сервере 253");
		ОтправитьСообщение(ТекстСообщения);
		ЗаполнитьЗначенияПеременных();
		Отказ = Ложь;
		//ОчисткаСтарыхБэкапов();
		//ВосстановитьБазуЗапускаТестов(Отказ);
		Если НЕ Отказ Тогда
			//ОбновитьБазуИзХранилища(Отказ);
			Если НЕ Отказ Тогда
				ЗапускДымовыхТестов();
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписатьЛог(ТекстОшибки);
		ОтправитьСообщение(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Регламент();