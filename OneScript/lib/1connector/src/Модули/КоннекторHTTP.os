#Использовать "../internal"

Функция Get(URL, ПараметрыЗапроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Сессия = Новый Сессия();
	КоннекторHTTPСлужебный.ЗаполнитьДополнительныеДанные(
		ДополнительныеПараметры, ПараметрыЗапроса, Неопределено, Неопределено);
	Возврат Сессия.ВызватьМетод("GET", URL, ДополнительныеПараметры);

КонецФункции

Функция Options(URL, ДополнительныеПараметры = Неопределено) Экспорт

	Сессия = Новый Сессия();
	КоннекторHTTPСлужебный.ЗаполнитьДополнительныеДанные(
		ДополнительныеПараметры, Неопределено, Неопределено, Неопределено);
	Возврат Сессия.ВызватьМетод("OPTIONS", URL, ДополнительныеПараметры);

КонецФункции

Функция Head(URL, ДополнительныеПараметры = Неопределено) Экспорт

	Сессия = Новый Сессия();
	КоннекторHTTPСлужебный.ЗаполнитьДополнительныеДанные(
		ДополнительныеПараметры, Неопределено, Неопределено, Неопределено);
	Возврат Сессия.ВызватьМетод("HEAD", URL, ДополнительныеПараметры);

КонецФункции

Функция Post(URL, Данные = Неопределено, Json = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Сессия = Новый Сессия();
	КоннекторHTTPСлужебный.ЗаполнитьДополнительныеДанные(
		ДополнительныеПараметры, Неопределено, Данные, Json);
	Возврат Сессия.ВызватьМетод("POST", URL, ДополнительныеПараметры);

КонецФункции

Функция Put(URL, Данные = Неопределено, Json = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Сессия = Новый Сессия();
	КоннекторHTTPСлужебный.ЗаполнитьДополнительныеДанные(
		ДополнительныеПараметры, Неопределено, Данные, Json);
	Возврат Сессия.ВызватьМетод("PUT", URL, ДополнительныеПараметры);

КонецФункции

Функция Patch(URL, Данные = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Сессия = Новый Сессия();
	КоннекторHTTPСлужебный.ЗаполнитьДополнительныеДанные(
		ДополнительныеПараметры, Неопределено, Данные, Неопределено);
	Возврат Сессия.ВызватьМетод("PATCH", URL, ДополнительныеПараметры);

КонецФункции

Функция Delete(URL, Данные = Неопределено, Json = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Сессия = Новый Сессия();
	КоннекторHTTPСлужебный.ЗаполнитьДополнительныеДанные(
		ДополнительныеПараметры, Неопределено, Данные, Json);
	Возврат Сессия.ВызватьМетод("DELETE", URL, ДополнительныеПараметры);

КонецФункции

Функция ВызватьМетод(Метод, URL, ДополнительныеПараметры = Неопределено) Экспорт

	Сессия = Новый Сессия();
	КоннекторHTTPСлужебный.ЗаполнитьДополнительныеДанные(
		ДополнительныеПараметры, Неопределено, Неопределено, Неопределено);
	Возврат Сессия.ВызватьМетод(Метод, URL, ДополнительныеПараметры);

КонецФункции

// Возвращает структурированное представление URL.
//
// Параметры:
//   URL - Строка - URL ресурса, к которому будет отправлен запрос.
//
// Возвращаемое значение:
//   Структура - структура URL:
//      *Схема - Строка - схема обращения к серверу (http, https).
//      *Аутентификация - Структура - параметры аутентификации:
//          *Пользователь - Строка - имя пользователя.
//          *Пароль - Строка - пароль пользователя.
//      *Сервер - Строка - адрес сервера.
//      *Порт - Число - порт сервера.
//      *Путь - Строка - адрес ресурса на сервере.
//      *ПараметрыЗапроса - Соответствие - параметры запроса передаваемые на сервер в URL (часть после ?):
//          *<Ключ> - Строка - ключ параметра в URL.
//          *<Значение> - Строка - значение параметра URL;
//                      - Массив - значения параметра (key=value1&key=value2).
//      *Фрагмент - Строка - часть URL после #.
//
Функция РазобратьURL(Знач URL) Экспорт

	Возврат Новый ПарсерURL(URL);

КонецФункции

// Вычисляет HMAC (hash-based message authentication code).
//
// Параметры:
//   Ключ - ДвоичныеДанные - секретный ключ.
//   Данные - ДвоичныеДанные - данные, для которых нужно посчитать HMAC.
//   Алгоритм - ХешФункция - алгоритм, используемый для вычисления хеша.
//
// Возвращаемое значение:
//   ДвоичныеДанные - вычисленное значение HMAC.
//
Функция HMAC(Ключ, Данные, Алгоритм) Экспорт

	ДлинаБлока = 64;

	Если Ключ.Размер() > ДлинаБлока Тогда
		Хеширование = Новый ХешированиеДанных(Алгоритм);
		Хеширование.Добавить(Ключ);

		КлючБуфер = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Хеширование.ХешСумма);
	Иначе
		КлючБуфер = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(Ключ);
	КонецЕсли;

	ИзмененныйКлюч = Новый БуферДвоичныхДанных(ДлинаБлока);
	ИзмененныйКлюч.Записать(0, КлючБуфер);

	ВнутреннийКлюч = ИзмененныйКлюч.Скопировать();
	ВнешнийКлюч = ИзмененныйКлюч.Скопировать();

	ВнутреннееВыравнивание = Новый БуферДвоичныхДанных(ДлинаБлока);
	ВнешнееВыравнивание = Новый БуферДвоичныхДанных(ДлинаБлока);
	Для Индекс = 0 По ДлинаБлока - 1 Цикл
		ВнутреннееВыравнивание.Установить(Индекс, 54);
		ВнешнееВыравнивание.Установить(Индекс, 92);
	КонецЦикла;

	ВнутреннееХеширование = Новый ХешированиеДанных(Алгоритм);
	ВнешнееХеширование = Новый ХешированиеДанных(Алгоритм);

	ВнутреннийКлюч.ЗаписатьПобитовоеИсключительноеИли(0, ВнутреннееВыравнивание);
	ВнешнийКлюч.ЗаписатьПобитовоеИсключительноеИли(0, ВнешнееВыравнивание);

	ВнешнееХеширование.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(ВнешнийКлюч));
	ВнутреннееХеширование.Добавить(ПолучитьДвоичныеДанныеИзБуфераДвоичныхДанных(ВнутреннийКлюч));

	Если ЗначениеЗаполнено(Данные) Тогда
		ВнутреннееХеширование.Добавить(Данные);
	КонецЕсли;

	ВнешнееХеширование.Добавить(ВнутреннееХеширование.ХешСумма);

	Возврат ВнешнееХеширование.ХешСумма;

КонецФункции
